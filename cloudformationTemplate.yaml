AWSTemplateFormatVersion: 2010-09-09
Description: This template retrieves the blocklists from S3 and uses them to deploy a DNS firewall into an account

Parameters:
  # Use public Systems Manager parameter to get latest Amazon Linux 2 AMI
  DnsFirewallVpcCidr:
    Type: String
    Default: 10.10.0.0/16
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$

  QueryTestingHostSubnetCidr:
    Type: String
    Default: 10.10.32.0/19
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$

  LatestAL2AmiId: # Locate latest Amazon Linux 2 AMI from public parameter store
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"

Resources:

  # Start - Create VPC, subnets, internet gateway, and routes
  DnsFirewallVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref DnsFirewallVpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: DNS Firewall VPC

  QueryTestingHostSubnet:
    Type: AWS::EC2::Subnet
    DependsOn: 
      - AttachGateway
    Properties:
      CidrBlock: !Ref QueryTestingHostSubnetCidr
      VpcId: !Ref DnsFirewallVpc
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: !Sub Bastion Host Subnet - ${AWS::Region}a

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Internet Gateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref DnsFirewallVpc
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn:
      - QueryTestingHostSubnet
    Properties:
      VpcId: !Ref DnsFirewallVpc

  QueryTestingHostSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref QueryTestingHostSubnet
      RouteTableId: !Ref PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  # End - Create VPC, subnets, internet gateway, and routes

  # Create security group for bastion host
  QueryTestingHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: Bastion host access
      GroupDescription: Network access rules applied to the bastion host
      VpcId: !Ref DnsFirewallVpc
      SecurityGroupEgress:
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          Description: Allow HTTP connections to anywhere for downloading files
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
          Description: Allow HTTPS connections to anywhere for downloading files

  # Start - Create bastion host IAM instance profile
  QueryTestingHostInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: QueryTestingHostIamInstanceProfile
      Roles:
        - !Ref QueryTestingHostIamRole

  QueryTestingHostIamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: QueryTestingHostIamRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: ResumeSession
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - ssm:ResumeSession
                  - eks:TagResource
                  - eks:UntagResource

  QueryTestingHostRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: QueryTestingHostPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          # Allow bastion host to assume QueryTestingHostIamRole role.
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Resource:
              - !GetAtt QueryTestingHostIamRole.Arn
          - Effect: Allow
            Action:
              - autoscaling:AttachInstances
              - autoscaling:AttachLoadBalancerTargetGroups
              - autoscaling:AttachLoadBalancers
              - autoscaling:CreateAutoScalingGroup
              - autoscaling:CreateLaunchConfiguration
              - autoscaling:CreateOrUpdateTags
              - autoscaling:SetDesiredCapacity
              - autoscaling:UpdateAutoScalingGroup
              - cloudformation:CreateStack
              - ec2:AllocateAddress
              - ec2:AssociateRouteTable
              - ec2:AttachInternetGateway
              - ec2:AuthorizeSecurityGroupEgress
              - ec2:AuthorizeSecurityGroupIngress
              - ec2:CreateLaunchTemplate
              - ec2:CreateInternetGateway
              - ec2:CreateNatGateway
              - ec2:CreateRoute
              - ec2:CreateRouteTable
              - ec2:CreateSecurityGroup
              - ec2:CreateSubnet
              - ec2:CreateTags
              - ec2:CreateVpc
              - ec2:ModifySubnetAttribute
              - ec2:ModifyVpcAttribute
              - eks:CreateCluster
              - eks:CreateNodegroup
              - eks:TagResource
              - eks:UpdateClusterConfig
              - eks:UpdateNodegroupConfig
              - iam:AddRoleToInstanceProfile
              - iam:AttachRolePolicy
              - iam:CreateServiceLinkedRole
              - iam:DeleteRolePolicy
              - ssm:GetParameter
            Resource: "*"
            #added condition to prevent privilege escalation
            Condition:
              StringNotEquals:
                aws:username: "awsstudent"
          - Effect: Allow
            Action:
              - ec2:RunInstances
            Resource: "*"
          - Effect: Allow
            Action:
              - iam:CreateRole
              - iam:PutRolePolicy
              - iam:PassRole
            Resource: !Sub arn:aws:iam::${AWS::AccountId}:role/eksctl-dev-cluster*
          - Effect: Allow
            Action:
              - ssm:UpdateDocument*
              - ssm:CreateDocument*
              - ssm:DeleteDocument*
            Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:document/SSM-SessionManagerRunShell
      Roles:
        - !Ref QueryTestingHostIamRole
  # End - Create bastion host IAM instance profile

  # Start - Create bastion host
  QueryTestingHost:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAL2AmiId
      InstanceType: t3.micro
      IamInstanceProfile: !Ref QueryTestingHostInstanceProfile
      Tags:
        - Key: Name
          Value: Bastion Host
      InstanceInitiatedShutdownBehavior: terminate
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
            DeleteOnTermination: true
            VolumeType: gp2
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet:
            - !Ref QueryTestingHostSecurityGroup
          SubnetId: !Ref QueryTestingHostSubnet
    CreationPolicy:
      ResourceSignal:
        Count: '1'
        Timeout: PT10M
  # End - Create bastion host

  ResolverFirewallDomainList1:
    Type: "AWS::Route53Resolver::FirewallDomainList"
    Properties:
      DomainFileUrl: s3://domainlists-013675256356/tlds.txt

  ResolverFirewallRuleGroup:
    Type: "AWS::Route53Resolver::FirewallRuleGroup"
    Properties:
      Name: "dns-firewall-rulegroup"
      FirewallRules:
        - Priority: 1
          Action: BLOCK
          BlockResponse: NXDOMAIN
          BlockOverrideTtl: 259200 ##Poisons the local DNS cache so that even if the attacker points his DNS to another resolver, it will continue returning NXDOMAIN
          FirewallDomainListId: !Ref "ResolverFirewallDomainList1"

  # QueryLogging:
  #   Type: AWS::Route53Resolver::ResolverQueryLoggingConfig
  #     Properties: 
  #       DestinationArn: arn:aws:s3:::query-logs-013675256356
  #       Name: DNS-Query-Logs-013675256356
